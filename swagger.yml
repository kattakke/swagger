openapi: 3.0.3
info:
  title: Swagger Kattakke - OpenAPI 3.0
  description: |-
    (*^^*)
  termsOfService: http://localhost/terms/
  contact:
    email: admin@example.com
  license:
    name: Kattakke License
    url: http://localhost/licenses
  version: 1.0.0
externalDocs:
  description: Find out more about Kattakke
  url: http://localhost/
servers:
  - url: http://localhost/api/v0
tags:
  - name: auth
    description: Auth
  - name: user
    description: user
  - name: book
    description: book
  - name: search
    description: search
  - name: etc
    description: etc
paths:
  /auth/me:
    get:
      tags:
        - auth
      summary: get authrized user info
      description: get authrized user info
      operationId: authMe
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags:
        - auth
      summary: get authorize token
      description: get authorize token
      operationId: authLogin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string

  /auth/logout:
    patch:
      tags:
        - auth
      summary: delete token
      description: delete token
      operationId: authLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation

  /users:
    post:
      tags:
        - user
      summary: register user
      description: register user
      operationId: userRegister
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: successful operation

  /users/{userId}:
    get:
      tags:
        - user
      summary: get user info
      description: get user info
      operationId: getUserInfo
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
        - user
      summary: patch user info
      description: patch user info
      operationId: patchUserInfo
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: UUID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - user
      summary: delete user info
      description: delete user info
      operationId: deleteUserInfo
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: successful operation

  /users/{userId}/shelf:
    get:
      tags:
        - user
      summary: get user shelf
      description: get user shelf
      operationId: getUserShelf
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: UUID
        - name: title
          in: query
          description: The title of book
          required: false
          schema:
            type: string
        - name: tag
          in: query
          description: The tag of book
          required: false
          schema:
            type: string
        - name: isbn
          in: query
          description: The isbn of book
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books:
    post:
      tags:
        - book
      summary: post book info
      description: post book info
      operationId: postBook
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isbn:
                  type: string
                title:
                  type: string
                author:
                  type: string
                imagePath:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /books/{bookId}:
    get:
      tags:
        - book
      summary: get book info
      description: get book info
      operationId: getBookInfo
      parameters:
        - name: bookId
          in: path
          description: ID of book
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    patch:
      tags:
        - book
      summary: patch book info
      description: patch book info
      operationId: patchBookInfo
      parameters:
        - name: bookId
          in: path
          description: ID of book
          required: true
          schema:
            type: string
            format: UUID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isbn:
                  type: string
                title:
                  type: string
                author:
                  type: string
                imagePath:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
        - book
      summary: delete book info
      description: delete book info
      operationId: deleteBookInfo
      parameters:
        - name: bookId
          in: path
          description: ID of book
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: successful operation

  /search:
    get:
      tags:
        - search
      summary: search book
      description: search book
      operationId: getSearchBook
      parameters:
        - name: title
          in: query
          description: The title of book
          required: false
          schema:
            type: string
        - name: isbn
          in: query
          description: The isbn of book
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSearch'

  /health:
    get:
      tags:
        - etc
      summary: Health Check API
      description: Always return 200
      operationId: healthCheck
      responses:
        '200':
          description: successful operation

components:
  schemas:
    Book:
      type: object
      properties:
        bookId:
          type: string
          format: UUID
        isbn:
          type: string
          nullable: true
        title:
          type: string
        author:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        imagePath:
          type: string

    BookSearch:
      type: object
      properties:
        isbn:
          type: string
          nullable: true
        title:
          type: string
        author:
          type: string
          nullable: true
        imagePath:
          type: string

    User:
      type: object
      properties:
        userId:
          type: string
          format: UUID
        name:
          type: string
        shelf:
          type: string
          format: UUID

    Shelf:
      type: object
      properties:
        shelfId:
          type: string
          format: UUID
        books:
          type: array
          items:
            type: string
            format: UUID
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
